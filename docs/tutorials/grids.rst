.. -*- coding: utf-8 -*-


-----------------------------------
Tutorial on dkdj grids
-----------------------------------

`dkdj` contains both the server-side serialization machinery and the 
client-side rendering machinery to efficiently display tabular data.

`dkdj` grids can be sorted, filtered, searched, paged, and edited.


Client-side usage
==================================================
`dkdj` grids can be used purely client-side, in fact, at its simplest
the `dk.DataGrid` widget only needs a data source and will figure out
how to display the data:

.. code-block:: javascript
   :linenos:

   dk.DataGrid.create_on('#my-grid', {

       datasource: ...,
        
   });


dk.data.ArraySource
--------------------------------------------------
The datasource with the least moving parts is the `ArraySource`. It creates
a datasource from a list of objects:

.. code-block:: javascript
   :linenos:
            
   dk.data.ArraySource.create({
       data: [
           {project: 'AFR-support', work: '1:11:11'},
           {project: 'Generelt NT', work: '2:22:11'},
           {project: 'Tiktok', work: '3:33:11'}
       ]
   })

This is appropriate for tables that do not need paging, but may need sorting.
It also meshes well with Django's templates when using the provided `jsonval`
filter:

.. code-block:: javascript
   :linenos:
            
   {% load dkdj_tags %}

   dk.data.ArraySource.create({
       data: {{ my_queryset|jsonval }}
   })

.. important:: It is generally a very bad idea to write javascript in the template
          files and it is especially bad to inject Django template variables
          into the middle of a javascript block, since it makes it impossible
          to pull the javascript out into a linter/minifier.

          A better solution is to encapsulate and isolate the javascript values
          that Django exposes::

              (function (my_queryset) {      // this is now a js-variable

                  dk.data.ArraySource.create({
                      data: my_queryset,     // now using a js-variable
                  })

              }(
                  {{ my_queryset|jsonval }}  // the conversion happens before calling the fn
              ));

          With this wrapper in place we could pull the code into its own file
          by extracting the function definition and leaving the function call:

    .. code-block:: html

              // my-script.js
              var my_function = function (my_queryset) {...};

              // my-template.html
              <script src="my-script.js"></script>
              <script>
                  var my_value = my_function({{ my_queryset|jsonval }});
              </script>

          I will be using the shorter version here for clarity.


The "simplest possible grid"
--------------------------------------------------
Inserting the datasource into the ``dk.DataGrid`` (from the top), we get:

.. code-block:: html
   :linenos:

    <div>
        <table id="simplest-grid" border=1></table>
    </div>
    <script>
        dk.DataGrid.create_on('#simplest-grid', {

            datasource: dk.data.ArraySource.create({
                data: [
                    {project: 'AFR-support', work: '1:11:11'},
                    {project: 'Generelt NT', work: '2:22:11'},
                    {project: 'Tiktok', work: '3:33:11'}
                ]
            })
        
        });
    </script>

which produces

.. image:: /images/simplest-grid.png

.. hint:: the pk column is auto-generated by the data source if it is not
          present in the data (it's necessary to be able to edit the data
          in the grid).

I've used ``create_on`` so I could specify ``border=1`` on the table.

important..
~~~~~~~~~~~
As a shortcut, there is no need to specify the datasource as an object, ie. this will 
work as well (and is the preferred spelling):

.. code-block:: html
   :linenos:
   :emphasize-lines: 3-7

    <script>
        dk.DataGrid.create_on('#simplest-grid', {
            datasource: [
                {project: 'AFR-support', work: '1:11:11'},
                {project: 'Generelt NT', work: '2:22:11'},
                {project: 'Tiktok', work: '3:33:11'}
            ])
        });
    </script>


Bootstrappifying the table
--------------------------------------------------
If you want to make it a Bootstrap styled table, just provide a partially 
created table for ``dk.DataGrid`` to work on:

.. code-block:: html

        <table id="my-table" class="table table-condenced table-bordered"></table>

given the previous ``dk.DataGrid``, this now becomes:

.. image:: /images/datagrid-bootstrappified.png


Selecting columns
--------------------------------------------------
To select which columns get displayed (e.g. to remove the ``pk`` column),
provide a ``columns`` property:

.. code-block:: javascript
    :linenos:
    :emphasize-lines: 4,5

    dk.DataGrid.create_on('#my-grid', {
        datasource: ...
        columns: {
            project: {},
            work: {}
        }
    });


Changing column headings
--------------------------------------------------
Add a ``label`` property to the column definition:

.. code-block:: javascript
    :linenos:
    :emphasize-lines: 4,5

    dk.DataGrid.create_on('#my-grid', {
        datasource: ...
        columns: {
            project: {label: 'Prosjekt'},
            work: {label: 'Arbeid'}
        }
    });


Formatting cell values
--------------------------------------------------
Add a ``format`` function property to the column definition:


.. code-block:: javascript
    :linenos:
    :emphasize-lines: 6-12

    dk.DataGrid.create_on('#my-grid', {
        datasource: ...
        columns: {
            project: {
                label: 'Prosjekt',
                format: function (val, record, cell) {
                    if (val == 'AFR-support') cell.css({
                        backgroundColor: 'green',
                        color: 'white'
                    });
                    return `(${record.pk}) ${val}`;
                }
            },
            ...
        }
    });


.. image:: /images/grid-format.png

